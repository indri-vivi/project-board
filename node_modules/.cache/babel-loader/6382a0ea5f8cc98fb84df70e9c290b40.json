{"ast":null,"code":"var _jsxFileName = \"/home/savi/Desktop/Project Board Typescript - Fe/src/Column.tsx\";\nimport React, { useRef } from \"react\";\nimport { AddNewItem } from \"./AddNewItem\";\nimport { useAppState } from \"./AppStateContext\";\nimport { ColumnContainer, ColumnTitle } from \"./styles\";\nimport { useDrop } from \"react-dnd\";\nimport { useItemDrag } from './useItemDrag';\nimport { isHidden } from './utils/isHidden';\nimport { Card } from \"./Card\";\nexport const Column = ({\n  text,\n  index,\n  id,\n  isPreview\n}) => {\n  const {\n    state,\n    dispatch\n  } = useAppState();\n  const ref = useRef(null);\n  const {\n    drag\n  } = useItemDrag({\n    type: \"COLUMN\",\n    id,\n    index,\n    text\n  });\n  const [, drop] = useDrop({\n    accept: \"COLUMN\",\n\n    hover(item) {\n      const dragIndex = item.index;\n      const hoverIndex = index;\n\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n\n      dispatch({\n        type: \"MOVE_LIST\",\n        payload: {\n          dragIndex,\n          hoverIndex\n        }\n      });\n      item.index = hoverIndex;\n    }\n\n  });\n  drag(drop(ref));\n  console.log(isPreview);\n  return /*#__PURE__*/React.createElement(ColumnContainer, {\n    ref: ref,\n    isHidden: isHidden(isPreview, state.draggedItem, \"COLUMN\", id),\n    isPreview: isPreview,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(ColumnTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, text), state.lists[index].tasks.map((task, index) => /*#__PURE__*/React.createElement(Card, {\n    columnId: id,\n    text: task.text,\n    key: task.id,\n    id: task.id,\n    index: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(AddNewItem, {\n    toggleButtonText: \"+ Add another task\",\n    onAdd: text => dispatch({\n      type: \"ADD_TASK\",\n      payload: {\n        text,\n        listId: id\n      }\n    }),\n    dark: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }));\n};","map":{"version":3,"sources":["/home/savi/Desktop/Project Board Typescript - Fe/src/Column.tsx"],"names":["React","useRef","AddNewItem","useAppState","ColumnContainer","ColumnTitle","useDrop","useItemDrag","isHidden","Card","Column","text","index","id","isPreview","state","dispatch","ref","drag","type","drop","accept","hover","item","dragIndex","hoverIndex","payload","console","log","draggedItem","lists","tasks","map","task","listId"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,MAAf,QAA4B,OAA5B;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,WAAT,QAA4B,mBAA5B;AACA,SAASC,eAAT,EAA0BC,WAA1B,QAA6C,UAA7C;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,IAAT,QAAqB,QAArB;AAUA,OAAO,MAAMC,MAAM,GAAG,CAAC;AACrBC,EAAAA,IADqB;AAErBC,EAAAA,KAFqB;AAGrBC,EAAAA,EAHqB;AAIrBC,EAAAA;AAJqB,CAAD,KAKH;AACnB,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBb,WAAW,EAAvC;AACA,QAAMc,GAAG,GAAGhB,MAAM,CAAiB,IAAjB,CAAlB;AAEA,QAAM;AAAEiB,IAAAA;AAAF,MAAWX,WAAW,CAAC;AAAEY,IAAAA,IAAI,EAAE,QAAR;AAAkBN,IAAAA,EAAlB;AAAsBD,IAAAA,KAAtB;AAA6BD,IAAAA;AAA7B,GAAD,CAA5B;AACA,QAAM,GAAGS,IAAH,IAAWd,OAAO,CAAC;AACvBe,IAAAA,MAAM,EAAE,QADe;;AAEvBC,IAAAA,KAAK,CAACC,IAAD,EAAgB;AACnB,YAAMC,SAAS,GAAGD,IAAI,CAACX,KAAvB;AACA,YAAMa,UAAU,GAAGb,KAAnB;;AACA,UAAIY,SAAS,KAAKC,UAAlB,EAA8B;AAC5B;AACD;;AACDT,MAAAA,QAAQ,CAAC;AAACG,QAAAA,IAAI,EAAE,WAAP;AAAoBO,QAAAA,OAAO,EAAE;AAACF,UAAAA,SAAD;AAAYC,UAAAA;AAAZ;AAA7B,OAAD,CAAR;AACAF,MAAAA,IAAI,CAACX,KAAL,GAAaa,UAAb;AACD;;AAVsB,GAAD,CAAxB;AAYAP,EAAAA,IAAI,CAACE,IAAI,CAACH,GAAD,CAAL,CAAJ;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAYd,SAAZ;AACA,sBACE,oBAAC,eAAD;AACE,IAAA,GAAG,EAAEG,GADP;AAEE,IAAA,QAAQ,EAAET,QAAQ,CAACM,SAAD,EAAYC,KAAK,CAACc,WAAlB,EAA+B,QAA/B,EAAyChB,EAAzC,CAFpB;AAGE,IAAA,SAAS,EAAEC,SAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAcH,IAAd,CALF,EAMGI,KAAK,CAACe,KAAN,CAAYlB,KAAZ,EAAmBmB,KAAnB,CAAyBC,GAAzB,CAA6B,CAACC,IAAD,EAAOrB,KAAP,kBAC1B,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAEC,EAAhB;AAAoB,IAAA,IAAI,EAAEoB,IAAI,CAACtB,IAA/B;AAAqC,IAAA,GAAG,EAAEsB,IAAI,CAACpB,EAA/C;AAAmD,IAAA,EAAE,EAAEoB,IAAI,CAACpB,EAA5D;AAAgE,IAAA,KAAK,EAAED,KAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,CANH,eASE,oBAAC,UAAD;AACE,IAAA,gBAAgB,EAAC,oBADnB;AAEE,IAAA,KAAK,EAAED,IAAI,IACTK,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE,UAAR;AAAoBO,MAAAA,OAAO,EAAE;AAAEf,QAAAA,IAAF;AAAQuB,QAAAA,MAAM,EAAErB;AAAhB;AAA7B,KAAD,CAHZ;AAKE,IAAA,IAAI,MALN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CADF;AAmBC,CA3CM","sourcesContent":["import React, {useRef} from \"react\"\nimport { AddNewItem } from \"./AddNewItem\"\nimport { useAppState } from \"./AppStateContext\"\nimport { ColumnContainer, ColumnTitle } from \"./styles\"\nimport { useDrop } from \"react-dnd\"\nimport { useItemDrag } from './useItemDrag'\nimport { isHidden } from './utils/isHidden'\nimport { Card } from \"./Card\"\nimport { DragItem } from \"./DragItem\"\n\ninterface ColumnProps {\n  text: string\n  index: number\n  id: string\n  isPreview?: boolean\n}\n\nexport const Column = ({\n  text,\n  index,\n  id,\n  isPreview\n}: ColumnProps) => {\nconst { state, dispatch } = useAppState()\nconst ref = useRef<HTMLDivElement>(null)\n\nconst { drag } = useItemDrag({ type: \"COLUMN\", id, index, text })\nconst [, drop] = useDrop({\n  accept: \"COLUMN\",\n  hover(item: DragItem){\n    const dragIndex = item.index\n    const hoverIndex = index\n    if (dragIndex === hoverIndex) {\n      return\n    }\n    dispatch({type: \"MOVE_LIST\", payload: {dragIndex, hoverIndex}})\n    item.index = hoverIndex\n  }\n})\ndrag(drop(ref))\nconsole.log(isPreview)\nreturn (\n  <ColumnContainer \n    ref={ref} \n    isHidden={isHidden(isPreview, state.draggedItem, \"COLUMN\", id)}\n    isPreview={isPreview}\n  > \n    <ColumnTitle>{text}</ColumnTitle> \n    {state.lists[index].tasks.map((task, index) => (\n        <Card columnId={id} text={task.text} key={task.id} id={task.id} index={index}/> )\n    )}\n    <AddNewItem\n      toggleButtonText=\"+ Add another task\" \n      onAdd={text =>\n        dispatch({ type: \"ADD_TASK\", payload: { text, listId: id } })\n      }\n      dark\n    />\n  </ColumnContainer>\n  ) \n}\n"]},"metadata":{},"sourceType":"module"}