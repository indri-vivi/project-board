{"ast":null,"code":"import { useEffect } from 'react';\nimport { useDrag } from \"react-dnd\";\nimport { useAppState } from \"./AppStateContext\";\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\nexport const useItemDrag = item => {\n  const {\n    dispatch\n  } = useAppState();\n  const [, drag, preview] = useDrag({\n    item,\n    begin: () => dispatch({\n      type: \"SET_DRAGGED_ITEM\",\n      payload: item\n    }),\n    end: () => dispatch({\n      type: \"SET_DRAGGED_ITEM\",\n      payload: undefined\n    })\n  });\n  useEffect(() => {\n    preview(getEmptyImage(), {\n      captureDraggingState: true\n    });\n  }, [preview]);\n  return {\n    drag\n  };\n};","map":{"version":3,"sources":["/home/savi/Desktop/Project Board Typescript - Fe/src/useItemDrag.ts"],"names":["useEffect","useDrag","useAppState","getEmptyImage","useItemDrag","item","dispatch","drag","preview","begin","type","payload","end","undefined","captureDraggingState"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,OAAxB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,WAAT,QAA4B,mBAA5B;AAEA,SAAQC,aAAR,QAA4B,yBAA5B;AAEA,OAAO,MAAMC,WAAW,GAAIC,IAAD,IAAoB;AAC7C,QAAM;AAAEC,IAAAA;AAAF,MAAeJ,WAAW,EAAhC;AACA,QAAM,GAAGK,IAAH,EAASC,OAAT,IAAoBP,OAAO,CAAC;AAChCI,IAAAA,IADgC;AAEhCI,IAAAA,KAAK,EAAE,MAAMH,QAAQ,CAAC;AACpBI,MAAAA,IAAI,EAAE,kBADc;AAEpBC,MAAAA,OAAO,EAAEN;AAFW,KAAD,CAFW;AAMhCO,IAAAA,GAAG,EAAE,MAAMN,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAE,kBAAR;AAA4BC,MAAAA,OAAO,EAAEE;AAArC,KAAD;AANa,GAAD,CAAjC;AASAb,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,OAAO,CAACL,aAAa,EAAd,EAAkB;AAAEW,MAAAA,oBAAoB,EAAE;AAAxB,KAAlB,CAAP;AACG,GAFI,EAEF,CAACN,OAAD,CAFE,CAAT;AAIA,SAAO;AAAED,IAAAA;AAAF,GAAP;AACD,CAhBM","sourcesContent":["import {useEffect} from 'react'\nimport { useDrag } from \"react-dnd\"\nimport { useAppState } from \"./AppStateContext\" \nimport { DragItem } from \"./DragItem\"\nimport {getEmptyImage} from \"react-dnd-html5-backend\"\n\nexport const useItemDrag = (item: DragItem) => {\n  const { dispatch } = useAppState()\n  const [, drag, preview] = useDrag({\n    item,\n    begin: () => dispatch({\n      type: \"SET_DRAGGED_ITEM\",\n      payload: item\n    }),\n    end: () => dispatch({ type: \"SET_DRAGGED_ITEM\", payload: undefined})\n  })\n\n  useEffect(() => {\n    preview(getEmptyImage(), { captureDraggingState: true });\n      }, [preview]);\n\n  return { drag }\n}"]},"metadata":{},"sourceType":"module"}