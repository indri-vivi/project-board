{"ast":null,"code":"var _jsxFileName = \"/home/savi/Desktop/Project Board Typescript - Fe/src/AppStateContext.tsx\";\nimport React, { createContext, useContext, useReducer } from \"react\";\nimport { findItemIndexById } from './utils/findItemIndexById';\nimport { moveItem } from './moveItem';\nimport { nanoid } from \"nanoid\";\nconst appData = {\n  lists: [{\n    id: \"0\",\n    text: \"To Do\",\n    tasks: []\n  }, {\n    id: \"1\",\n    text: \"On Progress\",\n    tasks: []\n  }, {\n    id: \"2\",\n    text: \"Done\",\n    tasks: []\n  }]\n};\n\nconst appStateReducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_LIST\":\n      {\n        return { ...state,\n          lists: [...state.lists, {\n            id: nanoid(),\n            text: action.payload,\n            tasks: []\n          }]\n        };\n      }\n\n    case \"ADD_TASK\":\n      {\n        const targetLaneIndex = findItemIndexById(state.lists, action.payload.listId);\n        state.lists[targetLaneIndex].tasks.push({\n          id: nanoid(),\n          text: action.payload.text\n        });\n        return { ...state\n        };\n      }\n\n    case \"MOVE_LIST\":\n      {\n        const {\n          dragIndex,\n          hoverIndex\n        } = action.payload;\n        state.lists = moveItem(state.lists, dragIndex, hoverIndex);\n        return { ...state\n        };\n      }\n\n    case \"SET_DRAGGED_ITEM\":\n      {\n        return { ...state,\n          draggedItem: action.payload\n        };\n      }\n\n    case \"MOVE_TASK\":\n      {\n        const {\n          dragIndex,\n          hoverIndex,\n          sourceColumn,\n          targetColumn\n        } = action.payload;\n        const sourceLaneIndex = findItemIndexById(state.lists, sourceColumn);\n        const targetLaneIndex = findItemIndexById(state.lists, targetColumn);\n        const item = state.lists[sourceLaneIndex].tasks.splice(dragIndex, 1)[0];\n        state.lists[targetLaneIndex].tasks.splice(hoverIndex, 0, item);\n        return { ...state\n        };\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nconst AppStateContext = createContext({});\nexport const AppStateProvider = ({\n  children\n}) => {\n  const [state, dispatch] = useReducer(appStateReducer, appData);\n  return /*#__PURE__*/React.createElement(AppStateContext.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 5\n    }\n  }, children);\n};\nexport const useAppState = () => {\n  return useContext(AppStateContext);\n};","map":{"version":3,"sources":["/home/savi/Desktop/Project Board Typescript - Fe/src/AppStateContext.tsx"],"names":["React","createContext","useContext","useReducer","findItemIndexById","moveItem","nanoid","appData","lists","id","text","tasks","appStateReducer","state","action","type","payload","targetLaneIndex","listId","push","dragIndex","hoverIndex","draggedItem","sourceColumn","targetColumn","sourceLaneIndex","item","splice","AppStateContext","AppStateProvider","children","dispatch","useAppState"],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useReducer } from \"react\"\nimport {findItemIndexById} from './utils/findItemIndexById'\nimport {moveItem} from './moveItem'\nimport {DragItem}  from './DragItem'\nimport { nanoid } from \"nanoid\"\ninterface Task { \n  id: string\n  text: string\n}\ninterface List { \n  id: string \n  text: string \n  tasks: Task[]\n}\n\nexport interface AppState { \n  lists: List[],\n  draggedItem?: DragItem | undefined\n}\n\nconst appData: AppState = { \n  lists: [\n    {\n    id: \"0\",\n    text: \"To Do\",\n    tasks: [] },\n    {\n    id: \"1\",\n    text: \"On Progress\",\n    tasks: [] },\n    {\n    id: \"2\",\n    text: \"Done\",\n    tasks: [] }\n    ] \n}\n\ninterface AppStateContextProps { \n  state: AppState\n  dispatch: React.Dispatch<Action>\n}\n\ntype Action = \n| {\n    type: \"ADD_LIST\"\n    payload: string\n  }\n| {\n  type: \"ADD_TASK\"\n  payload: { text: string; listId: string } \n} \n| {\n  type: \"MOVE_LIST\" \n  payload: {\n    dragIndex: number\n    hoverIndex: number\n    }\n  }\n| {\n  type: \"SET_DRAGGED_ITEM\"\n  payload: DragItem | undefined\n}\n| {\n  type: \"MOVE_TASK\" \n  payload: {\n    dragIndex: number\n    hoverIndex: number\n    sourceColumn: string\n    targetColumn: string\n  }\n}\n\nconst appStateReducer = (state: AppState, action: Action): AppState => {\n  switch(action.type) {\n    case \"ADD_LIST\": {\n      return { \n        ...state,\n        lists: [\n          ...state.lists,\n          { id: nanoid(), text: action.payload, tasks: [] }\n        ]\n      }\n    }\n\n    case \"ADD_TASK\": {\n      const targetLaneIndex = findItemIndexById(\n        state.lists,\n        action.payload.listId \n      )\n\n      state.lists[targetLaneIndex].tasks.push({\n        id: nanoid(),\n        text: action.payload.text\n      })\n\n      return {\n        ...state\n      }\n    }\n\n    case \"MOVE_LIST\": {\n      const {dragIndex, hoverIndex} = action.payload\n      state.lists = moveItem(state.lists, dragIndex, hoverIndex)\n      return {\n        ...state\n      }\n    }\n\n    case \"SET_DRAGGED_ITEM\": {\n      return { ...state, draggedItem: action.payload }\n    }\n\n    case \"MOVE_TASK\": { \n      const {\n        dragIndex,\n        hoverIndex,\n        sourceColumn,\n        targetColumn\n      } = action.payload\n\n      const sourceLaneIndex = findItemIndexById(state.lists, sourceColumn)\n      const targetLaneIndex = findItemIndexById(state.lists, targetColumn)\n      const item = state.lists[sourceLaneIndex].tasks.splice(dragIndex,1)[0]\n      state.lists[targetLaneIndex].tasks.splice(hoverIndex, 0, item)\n      return { ...state }\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n\nconst AppStateContext = createContext<AppStateContextProps>({} as AppStateContextProps)\n\nexport const AppStateProvider = ({ children }: React.PropsWithChildren<{}>) => {\n  const [state, dispatch] = useReducer(appStateReducer, appData)\n  return (\n    <AppStateContext.Provider value={{ state, dispatch }}> \n      {children}\n    </AppStateContext.Provider> \n  )\n}\n\nexport const useAppState = () => { \n  return useContext(AppStateContext)\n}"]},"metadata":{},"sourceType":"module"}